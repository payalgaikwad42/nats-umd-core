"use strict";
/*
 * Copyright 2023 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_HOST = exports.DEFAULT_PORT = exports.Match = void 0;
exports.syncIterator = syncIterator;
exports.createInbox = createInbox;
const nuid_1 = require("./nuid");
const errors_1 = require("./errors");
exports.Match = {
    // Exact option is case-sensitive
    Exact: "exact",
    // Case-sensitive, but key is transformed to Canonical MIME representation
    CanonicalMIME: "canonical",
    // Case-insensitive matches
    IgnoreCase: "insensitive",
};
/**
 * syncIterator is a utility function that allows an AsyncIterator to be triggered
 * by calling next() - the utility will yield null if the underlying iterator is closed.
 * Note it is possibly an error to call use this function on an AsyncIterable that has
 * already been started (Symbol.asyncIterator() has been called) from a looping construct.
 */
function syncIterator(src) {
    const iter = src[Symbol.asyncIterator]();
    return {
        async next() {
            const m = await iter.next();
            if (m.done) {
                return Promise.resolve(null);
            }
            return Promise.resolve(m.value);
        },
    };
}
function createInbox(prefix = "") {
    prefix = prefix || "_INBOX";
    if (typeof prefix !== "string") {
        throw (new TypeError("prefix must be a string"));
    }
    prefix.split(".")
        .forEach((v) => {
        if (v === "*" || v === ">") {
            throw errors_1.InvalidArgumentError.format("prefix", `cannot have wildcards ('${prefix}')`);
        }
    });
    return `${prefix}.${nuid_1.nuid.next()}`;
}
exports.DEFAULT_PORT = 4222;
exports.DEFAULT_HOST = "127.0.0.1";
//# sourceMappingURL=core.js.map