import type { Deferred } from "./util";
import type { QueuedIterator } from "./core";
import type { CallbackFn, Dispatcher } from "./core";
export declare class QueuedIteratorImpl<T> implements QueuedIterator<T>, Dispatcher<T> {
    inflight: number;
    processed: number;
    received: number;
    noIterator: boolean;
    iterClosed: Deferred<void | Error>;
    done: boolean;
    signal: Deferred<void>;
    yields: (T | CallbackFn)[];
    filtered: number;
    pendingFiltered: number;
    ctx?: unknown;
    _data?: unknown;
    err?: Error;
    time: number;
    profile: boolean;
    yielding: boolean;
    didBreak: boolean;
    constructor();
    [Symbol.asyncIterator](): AsyncIterator<T>;
    push(v: T | CallbackFn): void;
    iterate(): AsyncIterableIterator<T>;
    stop(err?: Error): void;
    getProcessed(): number;
    getPending(): number;
    getReceived(): number;
}
